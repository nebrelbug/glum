{"version":3,"file":"nom-nom.min.js","sources":["../src/index.ts"],"sourcesContent":["export default class NomNom {\n  size: number\n  values: Array<Symbol>\n  nameMap: { [index: string]: string };\n  [index: string]: any\n  constructor (...enumNames: string[])\n\n  constructor () {\n    if (arguments.length === 0) {\n      throw Error('Must provide at least one argument')\n    }\n    this.size = arguments.length\n    this.values = []\n    this.nameMap = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n      var name = arguments[i]\n      if (typeof name !== 'string') {\n        throw Error('Enum names must be strings')\n      }\n      var sym = Symbol('name')\n\n      Object.defineProperty(this, name, {\n        enumerable: true,\n        writable: false,\n        configurable: false,\n        value: sym\n      })\n\n      this.values.push(this[name])\n\n      this.nameMap[(sym as unknown) as string] = name\n    }\n    Object.freeze(this)\n  }\n\n  getName (sym: Symbol): string {\n    if (typeof sym !== 'symbol') {\n      throw Error('Argument must be a symbol')\n    }\n    return this.nameMap[(sym as unknown) as string]\n  }\n}\n"],"names":["arguments","length","Error","this","size","values","nameMap","i","name","sym","Symbol","Object","defineProperty","enumerable","writable","configurable","value","push","freeze","NomNom"],"mappings":"+MAOE,aACE,GAAyB,IAArBA,UAAUC,OACZ,MAAMC,MAAM,sCAEdC,KAAKC,KAAOJ,UAAUC,OACtBE,KAAKE,OAAS,GACdF,KAAKG,QAAU,GAEf,IAAK,IAAIC,EAAI,EAAGA,EAAIP,UAAUC,OAAQM,IAAK,CACzC,IAAIC,EAAOR,UAAUO,GACrB,GAAoB,iBAATC,EACT,MAAMN,MAAM,8BAEd,IAAIO,EAAMC,OAAO,QAEjBC,OAAOC,eAAeT,KAAMK,EAAM,CAChCK,YAAY,EACZC,UAAU,EACVC,cAAc,EACdC,MAAOP,IAGTN,KAAKE,OAAOY,KAAKd,KAAKK,IAEtBL,KAAKG,QAASG,GAA6BD,EAE7CG,OAAOO,OAAOf,MASlB,OANEgB,oBAAA,SAASV,GACP,GAAmB,iBAARA,EACT,MAAMP,MAAM,6BAEd,OAAOC,KAAKG,QAASG"}